{"version":3,"file":"static/js/722.a6b5fb88.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.styled.jsx","components/MovieItem/MovieItem.styled.jsx","helpers/ratingColorDetect.js","components/MovieItem/MovieItem.jsx","components/MoviesList/MoviesList.jsx","pages/HomePage/HomePage.styled.jsx","components/Searchbar/Searchbar.styled.jsx","components/Searchbar/Searchbar.jsx","pages/MoviesPage/MoviesPage.styled.jsx","pages/MoviesPage/MoviesPage.jsx","services/tmdb-api.js"],"sourcesContent":["import { fadeIn } from 'GlobalStyle';\n\nimport styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 12px;\n  animation: ${fadeIn} 700ms ease-in-out;\n`;\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const CardLink = styled(Link)`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 8px;\n  width: 224px;\n`;\n\nexport const ImgWrap = styled.div`\n  margin: 0 auto 8px auto;\n  border-radius: 8px;\n  width: 200px;\n  height: 268px;\n  display: flex;\n  align-content: center;\n  overflow: hidden;\n  transition: all var(--basic-transition);\n  &:hover {\n    box-shadow: 0px 0px 16px 4px var(--basic-dark);\n  }\n`;\n\nexport const Image = styled.img`\n  border-radius: 8px;\n  width: 100%;\n  object-fit: cover;\n  transition: transform var(--basic-transition);\n  &:hover {\n    transform: scale(1.1);\n  }\n`;\n\nexport const Title = styled.h3`\n  text-align: center;\n`;\n\nexport const Rating = styled.div`\n  position: absolute;\n  top: 16px;\n  right: 28px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 44px;\n  height: 44px;\n  border-radius: 50%;\n  border: 2px solid var(--basic-white);\n  background-color: ${({ $color }) => $color};\n  color: var(--basic-white);\n  box-shadow: rgba(193, 193, 193, 0.766) 0px 2px 4px 0px,\n    rgba(225, 225, 225, 0.682) 0px 2px 16px 0px;\n`;\n","export function ratingColorDetect(number) {\n  let color;\n  if (!number) {\n    color = '#959393';\n  } else if (number < 50) {\n    color = '#ce3030';\n  } else if (number < 70) {\n    color = '#e9ad3d';\n  } else if (number >= 70) {\n    color = '#437d33';\n  }\n  return color;\n}\n","import { useLocation } from 'react-router-dom';\nimport { CardLink, Image, ImgWrap, Rating, Title } from './MovieItem.styled';\nimport { ratingColorDetect } from 'helpers/ratingColorDetect';\n\nexport const MovieItem = ({ movie }) => {\n  const location = useLocation();\n  const POSTERS_URL = 'https://image.tmdb.org/t/p/';\n\n  const dateOptions = {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n  };\n\n  return (\n    <li>\n      <CardLink\n        to={\n          location.pathname === '/' || location.pathname === '/watchlist'\n            ? `/movies/${movie.id}`\n            : `${movie.id}`\n        }\n        state={{ from: location }}\n      >\n        <ImgWrap>\n          <Image\n            src={\n              movie.poster_path\n                ? `${POSTERS_URL}w300${movie.poster_path}`\n                : 'https://cdn.pixabay.com/photo/2014/01/21/16/01/backdrop-249158_1280.jpg'\n            }\n            alt={movie.title}\n          />\n        </ImgWrap>\n        <Title>{movie.title}</Title>\n        <p>\n          {movie.release_date\n            ? new Date(movie.release_date).toLocaleDateString(\n                'en-US',\n                dateOptions\n              )\n            : ''}\n        </p>\n        <Rating $color={ratingColorDetect(Math.round(movie.vote_average * 10))}>\n          {movie.vote_average === 0\n            ? 'NR'\n            : `${Math.round(movie.vote_average * 10)}%`}\n        </Rating>\n      </CardLink>\n    </li>\n  );\n};\n","import { List } from './MoviesList.styled';\nimport { MovieItem } from 'components/MovieItem/MovieItem';\n\nconst MoviesList = ({ movies }) => {\n  return (\n    <List>\n      {movies.map(movie => (\n        <MovieItem key={movie.id} movie={movie} />\n      ))}\n    </List>\n  );\n};\n\nexport default MoviesList;\n","import styled from 'styled-components';\n\nexport const PageTitle = styled.h1`\n  text-align: center;\n  color: var(--basic-white);\n  font-size: 60px;\n  line-height: 80px;\n  text-shadow: 0px 11px 10px #082925b2;\n`;\n\nexport const Info = styled.p`\n  text-align: center;\n  font-size: 24px;\n  color: var(--basic-white);\n  text-shadow: 3px 0px 7px rgba(85, 85, 85, 0.8),\n    -3px 0px 7px rgba(85, 85, 85, 0.8), 0px 4px 7px rgba(85, 85, 85, 0.8);\n`;\n\nexport const Title = styled.h2`\n  text-align: center;\n  font-size: 32px;\n  margin: 0 auto 16px auto;\n`;\n\nexport const Error = styled.p`\n  font-size: 20px;\n  margin: 24px 0;\n`;\n\nexport const Hero = styled.section`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  gap: 52px;\n  width: 100%;\n  height: 480px;\n  background: linear-gradient(to top, #082925b2 40%, #0c403b79 100%),\n    center / cover no-repeat url(${({ $heroImage }) => $heroImage});\n  margin-bottom: 24px;\n  border: none;\n`;\n","import { Field, Form } from 'formik';\nimport styled from 'styled-components';\nimport { BsSearch } from 'react-icons/bs';\n\nexport const SearchForm = styled(Form)`\n  margin: 0 auto 24px auto;\n  padding-left: 12px;\n  display: flex;\n  align-items: center;\n  width: 100%;\n  max-width: 600px;\n  background-color: var(--basic-white);\n  border: 1px solid var(--basic-dark);\n  border-radius: 3px;\n  overflow: hidden;\n`;\n\nexport const SearchFormButton = styled.button`\n  margin-left: 12px;\n  display: inline-block;\n  width: 48px;\n  height: 48px;\n  border: 0;\n  opacity: 0.6;\n  transition: opacity var(--basic-transition);\n  cursor: pointer;\n  outline: none;\n  background-color: var(--basic-light);\n\n  &:hover {\n    opacity: 1;\n  }\n\n  &:disabled {\n    opacity: 0.3;\n    cursor: not-allowed;\n  }\n`;\n\nexport const ButtonImg = styled(BsSearch)`\n  width: 36px;\n  height: 36px;\n  color: var(--basic-dark);\n`;\n\nexport const ButtonLabel = styled.span`\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  clip-path: inset(50%);\n  border: 0;\n`;\n\nexport const SearchInput = styled(Field)`\n  display: inline-block;\n  width: 100%;\n  font: inherit;\n  font-size: 20px;\n  border: none;\n  outline: none;\n  padding-left: 4px;\n  padding-right: 4px;\n\n  &:placeholder {\n    font: inherit;\n    font-size: 18px;\n  }\n`;\n","import { Formik } from 'formik';\nimport {\n  SearchForm,\n  SearchFormButton,\n  ButtonLabel,\n  SearchInput,\n  ButtonImg,\n} from './Searchbar.styled';\n\nexport const Searchbar = ({ handleSearch, handleChange, query }) => {\n  return (\n    <>\n      <Formik initialValues={{ searchQuery: '' }} onSubmit={handleSearch}>\n        <SearchForm>\n          <SearchInput\n            value={query}\n            name=\"searchQuery\"\n            type=\"text\"\n            autoComplete=\"off\"\n            autoFocus\n            placeholder=\"Search films\"\n            onChange={handleChange}\n          />\n\n          <SearchFormButton type=\"submit\">\n            <ButtonImg />\n            <ButtonLabel>Search</ButtonLabel>\n          </SearchFormButton>\n        </SearchForm>\n      </Formik>\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Wrap = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 24px;\n  padding: 24px;\n`;\n\nexport const Info = styled.h3`\n  width: 800px;\n  text-align: center;\n`;\n","import MoviesList from 'components/MoviesList/MoviesList';\nimport { Searchbar } from 'components/Searchbar/Searchbar';\nimport { Error } from 'pages/HomePage/HomePage.styled';\nimport { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchMoviesData } from 'services/tmdb-api';\nimport { Info, Wrap } from './MoviesPage.styled';\nimport { Pagination } from '@mui/material';\n\nconst MoviesPage = () => {\n  const [query, setQuery] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [movies, setMovies] = useState([]);\n  const [error, setError] = useState('');\n  const [pages, setPages] = useState(0);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pagesToShow, setPagesToShow] = useState(0);\n\n  const handleChange = ({ target: { value } }) => {\n    if (!value) setSearchParams({});\n    setQuery(value);\n  };\n\n  useEffect(() => {\n    const value = searchParams.get('query');\n    if (value) {\n      setQuery(value);\n    }\n  }, [searchParams]);\n\n  const handleSearch = () => {\n    if (query === '') {\n      setError('Please enter your search query');\n      setPagesToShow([]);\n      return;\n    }\n    setSearchParams({ query: query, page: 1 });\n    setError('');\n    setCurrentPage(1);\n    setMovies([]);\n  };\n\n  useEffect(() => {\n    const urlQuery = searchParams.get('query');\n    const urlPage = Number(searchParams.get('page'));\n    setCurrentPage(urlPage);\n\n    if (!urlQuery) return;\n\n    fetchMoviesData('searchByQuery', 0, urlQuery, urlPage)\n      .then(({ results, total_pages }) => {\n        if (!results.length) {\n          setError(\n            `We couldn't find movies, mentioning ${urlQuery.toUpperCase()}. Try something else`\n          );\n          setPagesToShow([]);\n          return;\n        }\n        setMovies(results);\n        setPages(total_pages);\n        setError('');\n        setPagesToShow(total_pages);\n      })\n      .catch(() => {\n        setError(\n          'We are sorry, but something went wrong :( Please, try again later'\n        );\n        setPagesToShow([]);\n      });\n  }, [searchParams, query]);\n\n  const handlePageClick = event => {\n    const number = Number(event.target.innerText);\n    setCurrentPage(number);\n    setSearchParams({ query: query, page: number });\n  };\n\n  return (\n    <Wrap>\n      <Info>\n        Ready to explore the world of cinema? <br />\n        Simply enter your movie query, and let the magic unfold!\n      </Info>\n      <Searchbar\n        handleSearch={handleSearch}\n        handleChange={handleChange}\n        query={query}\n      />\n      {error === '' ? <MoviesList movies={movies} /> : <Error>{error}</Error>}\n      {pages > 1 && (\n        <Pagination\n          count={pagesToShow}\n          page={currentPage}\n          onChange={handlePageClick}\n          hidePrevButton\n          hideNextButton\n          color={'success'}\n          sx={{\n            '& .MuiPaginationItem-root': {\n              color: '#ffffff',\n              backgroundColor: '#266861',\n              fontFamily: 'inherit',\n            },\n            '& .MuiPaginationItem-ellipsis': {\n              backgroundColor: 'transparent',\n              color: 'inherit',\n              fontSize: '24px',\n            },\n          }}\n        />\n      )}\n    </Wrap>\n  );\n};\n\nexport default MoviesPage;\n","import axios from 'axios';\n\nconst api_key = '81bc6a75d9ad77927c9b3f7e8ad30411';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport async function fetchMoviesData(type, id, query, page) {\n  const endpointByType = {\n    trending: '/trending/movie/day',\n    movieById: `/movie/${id}`,\n    searchByQuery: '/search/movie',\n    searchVideos: `/movie/${id}/videos`,\n    cast: `/movie/${id}/credits`,\n    reviews: `/movie/${id}/reviews`,\n    image: `/movie/${id}/images`,\n  };\n\n  const searchParams = new URLSearchParams({\n    query: query,\n    include_adult: false,\n    page: page,\n  });\n\n  const response = await axios.get(\n    `${BASE_URL}${endpointByType[type]}?api_key=${api_key}&${\n      type === 'searchByQuery' ? searchParams : ''\n    }`\n  );\n  return response.data;\n}\n"],"names":["List","styled","_templateObject","_taggedTemplateLiteral","fadeIn","CardLink","Link","ImgWrap","_templateObject2","Image","_templateObject3","Title","_templateObject4","Rating","_templateObject5","_ref","$color","ratingColorDetect","number","color","MovieItem","movie","location","useLocation","_jsx","children","_jsxs","to","pathname","concat","id","state","from","src","poster_path","alt","title","release_date","Date","toLocaleDateString","year","month","day","Math","round","vote_average","movies","map","PageTitle","Info","Error","Hero","$heroImage","SearchForm","Form","SearchFormButton","ButtonImg","BsSearch","ButtonLabel","SearchInput","Field","Searchbar","handleSearch","handleChange","query","_Fragment","Formik","initialValues","searchQuery","onSubmit","value","name","type","autoComplete","autoFocus","placeholder","onChange","Wrap","_useState","useState","_useState2","_slicedToArray","setQuery","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","_useState3","_useState4","setMovies","_useState5","_useState6","error","setError","_useState7","_useState8","pages","setPages","_useState9","_useState10","currentPage","setCurrentPage","_useState11","_useState12","pagesToShow","setPagesToShow","useEffect","get","urlQuery","urlPage","Number","fetchMoviesData","then","_ref2","results","total_pages","length","toUpperCase","catch","page","target","MoviesList","Pagination","count","event","innerText","hidePrevButton","hideNextButton","sx","backgroundColor","fontFamily","fontSize","api_key","BASE_URL","_x","_x2","_x3","_x4","_fetchMoviesData","apply","arguments","_asyncToGenerator","_regeneratorRuntime","_callee","endpointByType","response","_context","prev","next","trending","movieById","searchByQuery","searchVideos","cast","reviews","image","URLSearchParams","include_adult","axios","sent","abrupt","data","stop"],"sourceRoot":""}