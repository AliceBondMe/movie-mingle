{"version":3,"file":"static/js/900.d98842b5.chunk.js","mappings":"mOAEaA,EAAYC,EAAAA,QAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,0EAMtBC,EAAaH,EAAAA,QAAAA,GAASI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,sFAMtBG,EAAaL,EAAAA,QAAAA,GAASM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,0O,SCsCnC,EA7Ce,WACb,IAAQK,GAAYC,EAAAA,EAAAA,MAAZD,QACRE,GAA4BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAjCI,EAAMF,EAAA,GAAEG,EAASH,EAAA,GACxBI,GAA0BL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA/BE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,IAEtBG,EAAAA,EAAAA,YAAU,WACRC,QAAQC,IAAId,GACPA,IAGLe,EAAAA,EAAAA,GAAgB,QAASf,GACtBgB,MAAK,SAAAC,GAAoB,IAAjBC,EAASD,EAATC,UACFA,EAAUC,QAIfZ,EAAUW,EAAUE,KAAI,SAAAC,GAAI,SAAAC,OAlBjB,wCAkBkCA,OAAGD,EAAKE,UAAS,KAC9DZ,EAAS,KAJPA,EAAS,4CAKb,IACCa,OAAM,kBACLb,EACE,oEACD,GAEP,GAAG,CAACX,IAEJ,IAAMyB,EAAc,WAAO,EAE3B,OACEC,EAAAA,EAAAA,KAAClC,EAAS,CAAAmC,SACG,KAAVjB,GACCgB,EAAAA,EAAAA,KAAC9B,EAAU,CAAA+B,SACRrB,EAAOc,KAAI,SAAAQ,GAAK,OACfF,EAAAA,EAAAA,KAAC5B,EAAU,CAAa+B,QAASJ,EAAYE,UAC3CD,EAAAA,EAAAA,KAAA,OAAKI,IAAKF,EAAOG,IAAI,iBADNH,EAEJ,OAIjBF,EAAAA,EAAAA,KAAA,KAAAC,SAAIjB,KAIZ,C,kGChDMsB,EAAU,mCACVC,EAAW,+BAEV,SAAelB,EAAemB,EAAAC,EAAAC,EAAAC,GAAA,OAAAC,EAAAC,MAAC,KAADC,UAAA,CAuBpC,SAAAF,IAAA,OAAAA,GAAAG,EAAAA,EAAAA,GAAAC,IAAAA,MAvBM,SAAAC,EAA+BC,EAAMC,EAAIC,EAAOC,GAAI,IAAAC,EAAAC,EAAAC,EAAA,OAAAR,IAAAA,MAAA,SAAAS,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAevD,OAdIL,EAAiB,CACrBM,SAAU,sBACVC,UAAU,UAADjC,OAAYuB,GACrBW,cAAe,gBACfC,aAAa,UAADnC,OAAYuB,EAAE,WAC1Ba,KAAK,UAADpC,OAAYuB,EAAE,YAClBc,QAAQ,UAADrC,OAAYuB,EAAE,YACrBjB,MAAM,UAADN,OAAYuB,EAAE,YAGfI,EAAe,IAAIW,gBAAgB,CACvCd,MAAOA,EACPe,eAAe,EACfd,KAAMA,IACNI,EAAAE,KAAA,EAEqBS,EAAAA,EAAAA,IAAU,GAADxC,OAC3BW,GAAQX,OAAG0B,EAAeJ,GAAK,aAAAtB,OAAYU,EAAO,KAAAV,OAC1C,kBAATsB,EAA2BK,EAAe,KAE5C,KAAD,EAJa,OAARC,EAAQC,EAAAY,KAAAZ,EAAAa,OAAA,SAKPd,EAASe,MAAI,wBAAAd,EAAAe,OAAA,GAAAvB,EAAA,MACrBJ,MAAA,KAAAC,UAAA,C","sources":["components/Photos/Photos.styled.jsx","components/Photos/Photos.jsx","services/tmdb-api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  justify-content: center;\n  padding: 24px;\n`;\n\nexport const ImagesList = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(5, 240px);\n  gap: 12px;\n`;\n\nexport const ImagesItem = styled.li`\n  cursor: pointer;\n  transition: all var(--basic-transition);\n\n  &:hover {\n    box-shadow: rgba(0, 0, 0, 0.4) 0px 2px 4px,\n      rgba(0, 0, 0, 0.3) 0px 7px 13px -3px,\n      rgba(0, 0, 0, 0.2) 0px -3px 0px inset;\n  }\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMoviesData } from 'services/tmdb-api';\nimport { Container, ImagesItem, ImagesList } from './Photos.styled';\n\nconst IMAGE_PATH = 'https://image.tmdb.org/t/p/original/';\n\nconst Photos = () => {\n  const { movieId } = useParams();\n  const [images, setImages] = useState([]);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    console.log(movieId);\n    if (!movieId) {\n      return;\n    }\n    fetchMoviesData('image', movieId)\n      .then(({ backdrops }) => {\n        if (!backdrops.length) {\n          setError('We are sorry, but there are no photos yet');\n          return;\n        }\n        setImages(backdrops.map(item => `${IMAGE_PATH}${item.file_path}`));\n        setError('');\n      })\n      .catch(() =>\n        setError(\n          'We are sorry, but something went wrong :( Please, try again later'\n        )\n      );\n  }, [movieId]);\n\n  const handleClick = () => {};\n\n  return (\n    <Container>\n      {error === '' ? (\n        <ImagesList>\n          {images.map(image => (\n            <ImagesItem key={image} onClick={handleClick}>\n              <img src={image} alt=\"movie-scene\"></img>\n            </ImagesItem>\n          ))}\n        </ImagesList>\n      ) : (\n        <p>{error}</p>\n      )}\n    </Container>\n  );\n};\n\nexport default Photos;\n","import axios from 'axios';\n\nconst api_key = '81bc6a75d9ad77927c9b3f7e8ad30411';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport async function fetchMoviesData(type, id, query, page) {\n  const endpointByType = {\n    trending: '/trending/movie/day',\n    movieById: `/movie/${id}`,\n    searchByQuery: '/search/movie',\n    searchVideos: `/movie/${id}/videos`,\n    cast: `/movie/${id}/credits`,\n    reviews: `/movie/${id}/reviews`,\n    image: `/movie/${id}/images`,\n  };\n\n  const searchParams = new URLSearchParams({\n    query: query,\n    include_adult: false,\n    page: page,\n  });\n\n  const response = await axios.get(\n    `${BASE_URL}${endpointByType[type]}?api_key=${api_key}&${\n      type === 'searchByQuery' ? searchParams : ''\n    }`\n  );\n  return response.data;\n}\n"],"names":["Container","styled","_templateObject","_taggedTemplateLiteral","ImagesList","_templateObject2","ImagesItem","_templateObject3","movieId","useParams","_useState","useState","_useState2","_slicedToArray","images","setImages","_useState3","_useState4","error","setError","useEffect","console","log","fetchMoviesData","then","_ref","backdrops","length","map","item","concat","file_path","catch","handleClick","_jsx","children","image","onClick","src","alt","api_key","BASE_URL","_x","_x2","_x3","_x4","_fetchMoviesData","apply","arguments","_asyncToGenerator","_regeneratorRuntime","_callee","type","id","query","page","endpointByType","searchParams","response","_context","prev","next","trending","movieById","searchByQuery","searchVideos","cast","reviews","URLSearchParams","include_adult","axios","sent","abrupt","data","stop"],"sourceRoot":""}